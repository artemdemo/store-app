{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/change_detection/parser/context_with_variable_bindings.js","@traceur/generated/TemplateParser/15","@traceur/generated/TemplateParser/16"],"names":[],"mappings":"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","file":"angular2/src/change_detection/parser/context_with_variable_bindings.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {assert} from \"rtts_assert/rtts_assert\";\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {BaseException} from 'angular2/src/facade/lang';\nexport class ContextWithVariableBindings {\n  constructor(parent, varBindings) {\n    assert.argumentTypes(parent, assert.type.any, varBindings, Map);\n    this.parent = parent;\n    this.varBindings = varBindings;\n  }\n  hasBinding(name) {\n    assert.argumentTypes(name, assert.type.string);\n    return assert.returnType((MapWrapper.contains(this.varBindings, name)), assert.type.boolean);\n  }\n  get(name) {\n    assert.argumentTypes(name, assert.type.string);\n    return MapWrapper.get(this.varBindings, name);\n  }\n  set(name, value) {\n    assert.argumentTypes(name, assert.type.string, value, assert.type.any);\n    if (this.hasBinding(name)) {\n      MapWrapper.set(this.varBindings, name, value);\n    } else {\n      throw new BaseException('VariableBindings do not support setting of new keys post-construction.');\n    }\n  }\n  clearValues() {\n    for (var k of MapWrapper.keys(this.varBindings)) {\n      MapWrapper.set(this.varBindings, k, null);\n    }\n  }\n}\nObject.defineProperty(ContextWithVariableBindings, \"parameters\", {get: function() {\n    return [[assert.type.any], [Map]];\n  }});\nObject.defineProperty(ContextWithVariableBindings.prototype.hasBinding, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(ContextWithVariableBindings.prototype.get, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(ContextWithVariableBindings.prototype.set, \"parameters\", {get: function() {\n    return [[assert.type.string], []];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/src/change_detection/parser/context_with_variable_bindings.map\n\n//# sourceMappingURL=./context_with_variable_bindings.map","\n        for (var $__placeholder__0 =\n                 $__placeholder__1[\n                     $traceurRuntime.toProperty(Symbol.iterator)](),\n                 $__placeholder__2;\n             !($__placeholder__3 = $__placeholder__4.next()).done; ) {\n          $__placeholder__5;\n          $__placeholder__6;\n        }","void 0"]}