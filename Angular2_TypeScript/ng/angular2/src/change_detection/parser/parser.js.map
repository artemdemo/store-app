{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","angular2/src/change_detection/parser/parser.js","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","@traceur/generated/TemplateParser/29"],"names":[],"mappings":"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","file":"angular2/src/change_detection/parser/parser.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","import {assert} from \"rtts_assert/rtts_assert\";\nimport {FIELD,\n  int,\n  isBlank,\n  isPresent,\n  BaseException,\n  StringWrapper,\n  RegExpWrapper} from 'angular2/src/facade/lang';\nimport {ListWrapper,\n  List} from 'angular2/src/facade/collection';\nimport {Lexer,\n  EOF,\n  Token,\n  $PERIOD,\n  $COLON,\n  $SEMICOLON,\n  $LBRACKET,\n  $RBRACKET,\n  $COMMA,\n  $LBRACE,\n  $RBRACE,\n  $LPAREN,\n  $RPAREN} from './lexer';\nimport {reflector,\n  Reflector} from 'angular2/src/reflection/reflection';\nimport {AST,\n  EmptyExpr,\n  ImplicitReceiver,\n  AccessMember,\n  LiteralPrimitive,\n  Expression,\n  Binary,\n  PrefixNot,\n  Conditional,\n  Formatter,\n  Assignment,\n  Chain,\n  KeyedAccess,\n  LiteralArray,\n  LiteralMap,\n  Interpolation,\n  MethodCall,\n  FunctionCall,\n  TemplateBindings,\n  TemplateBinding,\n  ASTWithSource} from './ast';\nvar _implicitReceiver = new ImplicitReceiver();\nvar INTERPOLATION_REGEXP = RegExpWrapper.create('\\\\{\\\\{(.*?)\\\\}\\\\}');\nvar QUOTE_REGEXP = RegExpWrapper.create(\"'\");\nexport class Parser {\n  constructor(lexer, providedReflector = null) {\n    assert.argumentTypes(lexer, Lexer, providedReflector, Reflector);\n    this._lexer = lexer;\n    this._reflector = isPresent(providedReflector) ? providedReflector : reflector;\n  }\n  parseAction(input, location) {\n    assert.argumentTypes(input, assert.type.string, location, assert.type.any);\n    var tokens = this._lexer.tokenize(input);\n    var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();\n    return assert.returnType((new ASTWithSource(ast, input, location)), ASTWithSource);\n  }\n  parseBinding(input, location) {\n    assert.argumentTypes(input, assert.type.string, location, assert.type.any);\n    var tokens = this._lexer.tokenize(input);\n    var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();\n    return assert.returnType((new ASTWithSource(ast, input, location)), ASTWithSource);\n  }\n  parseTemplateBindings(input, location) {\n    assert.argumentTypes(input, assert.type.string, location, assert.type.any);\n    var tokens = this._lexer.tokenize(input);\n    return assert.returnType((new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings()), assert.genericType(List, TemplateBinding));\n  }\n  parseInterpolation(input, location) {\n    assert.argumentTypes(input, assert.type.string, location, assert.type.any);\n    var parts = StringWrapper.split(input, INTERPOLATION_REGEXP);\n    if (parts.length <= 1) {\n      return assert.returnType((null), ASTWithSource);\n    }\n    var strings = [];\n    var expressions = [];\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      if (i % 2 === 0) {\n        ListWrapper.push(strings, part);\n      } else {\n        var tokens = this._lexer.tokenize(part);\n        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();\n        ListWrapper.push(expressions, ast);\n      }\n    }\n    return assert.returnType((new ASTWithSource(new Interpolation(strings, expressions), input, location)), ASTWithSource);\n  }\n  wrapLiteralPrimitive(input, location) {\n    assert.argumentTypes(input, assert.type.string, location, assert.type.any);\n    return assert.returnType((new ASTWithSource(new LiteralPrimitive(input), input, location)), ASTWithSource);\n  }\n}\nObject.defineProperty(Parser, \"parameters\", {get: function() {\n    return [[Lexer], [Reflector]];\n  }});\nObject.defineProperty(Parser.prototype.parseAction, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any]];\n  }});\nObject.defineProperty(Parser.prototype.parseBinding, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any]];\n  }});\nObject.defineProperty(Parser.prototype.parseTemplateBindings, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any]];\n  }});\nObject.defineProperty(Parser.prototype.parseInterpolation, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any]];\n  }});\nObject.defineProperty(Parser.prototype.wrapLiteralPrimitive, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any]];\n  }});\nclass _ParseAST {\n  constructor(input, location, tokens, reflector, parseAction) {\n    assert.argumentTypes(input, assert.type.string, location, assert.type.any, tokens, List, reflector, Reflector, parseAction, assert.type.boolean);\n    this.input = input;\n    this.location = location;\n    this.tokens = tokens;\n    this.index = 0;\n    this.reflector = reflector;\n    this.parseAction = parseAction;\n  }\n  peek(offset) {\n    assert.argumentTypes(offset, int);\n    var i = this.index + offset;\n    return assert.returnType((i < this.tokens.length ? this.tokens[i] : EOF), Token);\n  }\n  get next() {\n    return assert.returnType((this.peek(0)), Token);\n  }\n  get inputIndex() {\n    return assert.returnType(((this.index < this.tokens.length) ? this.next.index : this.input.length), int);\n  }\n  advance() {\n    this.index++;\n  }\n  optionalCharacter(code) {\n    assert.argumentTypes(code, int);\n    if (this.next.isCharacter(code)) {\n      this.advance();\n      return assert.returnType((true), assert.type.boolean);\n    } else {\n      return assert.returnType((false), assert.type.boolean);\n    }\n  }\n  optionalKeywordVar() {\n    if (this.peekKeywordVar()) {\n      this.advance();\n      return assert.returnType((true), assert.type.boolean);\n    } else {\n      return assert.returnType((false), assert.type.boolean);\n    }\n  }\n  peekKeywordVar() {\n    return assert.returnType((this.next.isKeywordVar() || this.next.isOperator('#')), assert.type.boolean);\n  }\n  expectCharacter(code) {\n    assert.argumentTypes(code, int);\n    if (this.optionalCharacter(code))\n      return ;\n    this.error(`Missing expected ${StringWrapper.fromCharCode(code)}`);\n  }\n  optionalOperator(op) {\n    assert.argumentTypes(op, assert.type.string);\n    if (this.next.isOperator(op)) {\n      this.advance();\n      return assert.returnType((true), assert.type.boolean);\n    } else {\n      return assert.returnType((false), assert.type.boolean);\n    }\n  }\n  expectOperator(operator) {\n    assert.argumentTypes(operator, assert.type.string);\n    if (this.optionalOperator(operator))\n      return ;\n    this.error(`Missing expected operator ${operator}`);\n  }\n  expectIdentifierOrKeyword() {\n    var n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword()) {\n      this.error(`Unexpected token ${n}, expected identifier or keyword`);\n    }\n    this.advance();\n    return assert.returnType((n.toString()), assert.type.string);\n  }\n  expectIdentifierOrKeywordOrString() {\n    var n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n      this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\n    }\n    this.advance();\n    return assert.returnType((n.toString()), assert.type.string);\n  }\n  parseChain() {\n    var exprs = [];\n    while (this.index < this.tokens.length) {\n      var expr = this.parseFormatter();\n      ListWrapper.push(exprs, expr);\n      if (this.optionalCharacter($SEMICOLON)) {\n        if (!this.parseAction) {\n          this.error(\"Binding expression cannot contain chained expression\");\n        }\n        while (this.optionalCharacter($SEMICOLON)) {}\n      } else if (this.index < this.tokens.length) {\n        this.error(`Unexpected token '${this.next}'`);\n      }\n    }\n    if (exprs.length == 0)\n      return assert.returnType((new EmptyExpr()), AST);\n    if (exprs.length == 1)\n      return assert.returnType((exprs[0]), AST);\n    return assert.returnType((new Chain(exprs)), AST);\n  }\n  parseFormatter() {\n    var result = this.parseExpression();\n    while (this.optionalOperator(\"|\")) {\n      if (this.parseAction) {\n        this.error(\"Cannot have a formatter in an action expression\");\n      }\n      var name = this.expectIdentifierOrKeyword();\n      var args = ListWrapper.create();\n      while (this.optionalCharacter($COLON)) {\n        ListWrapper.push(args, this.parseExpression());\n      }\n      result = new Formatter(result, name, args);\n    }\n    return result;\n  }\n  parseExpression() {\n    var start = this.inputIndex;\n    var result = this.parseConditional();\n    while (this.next.isOperator('=')) {\n      if (!result.isAssignable) {\n        var end = this.inputIndex;\n        var expression = this.input.substring(start, end);\n        this.error(`Expression ${expression} is not assignable`);\n      }\n      if (!this.parseAction) {\n        this.error(\"Binding expression cannot contain assignments\");\n      }\n      this.expectOperator('=');\n      result = new Assignment(result, this.parseConditional());\n    }\n    return result;\n  }\n  parseConditional() {\n    var start = this.inputIndex;\n    var result = this.parseLogicalOr();\n    if (this.optionalOperator('?')) {\n      var yes = this.parseExpression();\n      if (!this.optionalCharacter($COLON)) {\n        var end = this.inputIndex;\n        var expression = this.input.substring(start, end);\n        this.error(`Conditional expression ${expression} requires all 3 expressions`);\n      }\n      var no = this.parseExpression();\n      return new Conditional(result, yes, no);\n    } else {\n      return result;\n    }\n  }\n  parseLogicalOr() {\n    var result = this.parseLogicalAnd();\n    while (this.optionalOperator('||')) {\n      result = new Binary('||', result, this.parseLogicalAnd());\n    }\n    return result;\n  }\n  parseLogicalAnd() {\n    var result = this.parseEquality();\n    while (this.optionalOperator('&&')) {\n      result = new Binary('&&', result, this.parseEquality());\n    }\n    return result;\n  }\n  parseEquality() {\n    var result = this.parseRelational();\n    while (true) {\n      if (this.optionalOperator('==')) {\n        result = new Binary('==', result, this.parseRelational());\n      } else if (this.optionalOperator('!=')) {\n        result = new Binary('!=', result, this.parseRelational());\n      } else {\n        return result;\n      }\n    }\n  }\n  parseRelational() {\n    var result = this.parseAdditive();\n    while (true) {\n      if (this.optionalOperator('<')) {\n        result = new Binary('<', result, this.parseAdditive());\n      } else if (this.optionalOperator('>')) {\n        result = new Binary('>', result, this.parseAdditive());\n      } else if (this.optionalOperator('<=')) {\n        result = new Binary('<=', result, this.parseAdditive());\n      } else if (this.optionalOperator('>=')) {\n        result = new Binary('>=', result, this.parseAdditive());\n      } else {\n        return result;\n      }\n    }\n  }\n  parseAdditive() {\n    var result = this.parseMultiplicative();\n    while (true) {\n      if (this.optionalOperator('+')) {\n        result = new Binary('+', result, this.parseMultiplicative());\n      } else if (this.optionalOperator('-')) {\n        result = new Binary('-', result, this.parseMultiplicative());\n      } else {\n        return result;\n      }\n    }\n  }\n  parseMultiplicative() {\n    var result = this.parsePrefix();\n    while (true) {\n      if (this.optionalOperator('*')) {\n        result = new Binary('*', result, this.parsePrefix());\n      } else if (this.optionalOperator('%')) {\n        result = new Binary('%', result, this.parsePrefix());\n      } else if (this.optionalOperator('/')) {\n        result = new Binary('/', result, this.parsePrefix());\n      } else {\n        return result;\n      }\n    }\n  }\n  parsePrefix() {\n    if (this.optionalOperator('+')) {\n      return this.parsePrefix();\n    } else if (this.optionalOperator('-')) {\n      return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());\n    } else if (this.optionalOperator('!')) {\n      return new PrefixNot(this.parsePrefix());\n    } else {\n      return this.parseCallChain();\n    }\n  }\n  parseCallChain() {\n    var result = this.parsePrimary();\n    while (true) {\n      if (this.optionalCharacter($PERIOD)) {\n        result = this.parseAccessMemberOrMethodCall(result);\n      } else if (this.optionalCharacter($LBRACKET)) {\n        var key = this.parseExpression();\n        this.expectCharacter($RBRACKET);\n        result = new KeyedAccess(result, key);\n      } else if (this.optionalCharacter($LPAREN)) {\n        var args = this.parseCallArguments();\n        this.expectCharacter($RPAREN);\n        result = new FunctionCall(result, args);\n      } else {\n        return assert.returnType((result), AST);\n      }\n    }\n  }\n  parsePrimary() {\n    if (this.optionalCharacter($LPAREN)) {\n      var result = this.parseFormatter();\n      this.expectCharacter($RPAREN);\n      return result;\n    } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {\n      this.advance();\n      return new LiteralPrimitive(null);\n    } else if (this.next.isKeywordTrue()) {\n      this.advance();\n      return new LiteralPrimitive(true);\n    } else if (this.next.isKeywordFalse()) {\n      this.advance();\n      return new LiteralPrimitive(false);\n    } else if (this.optionalCharacter($LBRACKET)) {\n      var elements = this.parseExpressionList($RBRACKET);\n      this.expectCharacter($RBRACKET);\n      return new LiteralArray(elements);\n    } else if (this.next.isCharacter($LBRACE)) {\n      return this.parseLiteralMap();\n    } else if (this.next.isIdentifier()) {\n      return this.parseAccessMemberOrMethodCall(_implicitReceiver);\n    } else if (this.next.isNumber()) {\n      var value = this.next.toNumber();\n      this.advance();\n      return new LiteralPrimitive(value);\n    } else if (this.next.isString()) {\n      var value = this.next.toString();\n      this.advance();\n      return new LiteralPrimitive(value);\n    } else if (this.index >= this.tokens.length) {\n      this.error(`Unexpected end of expression: ${this.input}`);\n    } else {\n      this.error(`Unexpected token ${this.next}`);\n    }\n  }\n  parseExpressionList(terminator) {\n    assert.argumentTypes(terminator, int);\n    var result = [];\n    if (!this.next.isCharacter(terminator)) {\n      do {\n        ListWrapper.push(result, this.parseExpression());\n      } while (this.optionalCharacter($COMMA));\n    }\n    return assert.returnType((result), List);\n  }\n  parseLiteralMap() {\n    var keys = [];\n    var values = [];\n    this.expectCharacter($LBRACE);\n    if (!this.optionalCharacter($RBRACE)) {\n      do {\n        var key = this.expectIdentifierOrKeywordOrString();\n        ListWrapper.push(keys, key);\n        this.expectCharacter($COLON);\n        ListWrapper.push(values, this.parseExpression());\n      } while (this.optionalCharacter($COMMA));\n      this.expectCharacter($RBRACE);\n    }\n    return new LiteralMap(keys, values);\n  }\n  parseAccessMemberOrMethodCall(receiver) {\n    var id = this.expectIdentifierOrKeyword();\n    if (this.optionalCharacter($LPAREN)) {\n      var args = this.parseCallArguments();\n      this.expectCharacter($RPAREN);\n      var fn = this.reflector.method(id);\n      return assert.returnType((new MethodCall(receiver, id, fn, args)), AST);\n    } else {\n      var getter = this.reflector.getter(id);\n      var setter = this.reflector.setter(id);\n      return assert.returnType((new AccessMember(receiver, id, getter, setter)), AST);\n    }\n  }\n  parseCallArguments() {\n    if (this.next.isCharacter($RPAREN))\n      return [];\n    var positionals = [];\n    do {\n      ListWrapper.push(positionals, this.parseExpression());\n    } while (this.optionalCharacter($COMMA));\n    return positionals;\n  }\n  expectTemplateBindingKey() {\n    var result = '';\n    var operatorFound = false;\n    do {\n      result += this.expectIdentifierOrKeywordOrString();\n      operatorFound = this.optionalOperator('-');\n      if (operatorFound) {\n        result += '-';\n      }\n    } while (operatorFound);\n    return result.toString();\n  }\n  parseTemplateBindings() {\n    var bindings = [];\n    while (this.index < this.tokens.length) {\n      var keyIsVar = assert.type(this.optionalKeywordVar(), assert.type.boolean);\n      var key = this.expectTemplateBindingKey();\n      this.optionalCharacter($COLON);\n      var name = null;\n      var expression = null;\n      if (this.next !== EOF) {\n        if (keyIsVar) {\n          if (this.optionalOperator(\"=\")) {\n            name = this.expectTemplateBindingKey();\n          } else {\n            name = '\\$implicit';\n          }\n        } else if (!this.peekKeywordVar()) {\n          var start = this.inputIndex;\n          var ast = this.parseExpression();\n          var source = this.input.substring(start, this.inputIndex);\n          expression = new ASTWithSource(ast, source, this.location);\n        }\n      }\n      ListWrapper.push(bindings, new TemplateBinding(key, keyIsVar, name, expression));\n      if (!this.optionalCharacter($SEMICOLON)) {\n        this.optionalCharacter($COMMA);\n      }\n      ;\n    }\n    return bindings;\n  }\n  error(message, index = null) {\n    assert.argumentTypes(message, assert.type.string, index, int);\n    if (isBlank(index))\n      index = this.index;\n    var location = (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;\n    throw new BaseException(`Parser Error: ${message} ${location} [${this.input}] in ${this.location}`);\n  }\n}\nObject.defineProperty(_ParseAST, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.any], [List], [Reflector], [assert.type.boolean]];\n  }});\nObject.defineProperty(_ParseAST.prototype.peek, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(_ParseAST.prototype.optionalCharacter, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(_ParseAST.prototype.expectCharacter, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(_ParseAST.prototype.optionalOperator, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(_ParseAST.prototype.expectOperator, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(_ParseAST.prototype.parseExpressionList, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(_ParseAST.prototype.error, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/src/change_detection/parser/parser.map\n\n//# sourceMappingURL=./parser.map","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","$__placeholder__0 = $__placeholder__1"]}