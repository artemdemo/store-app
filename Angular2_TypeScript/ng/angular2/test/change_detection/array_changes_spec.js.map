{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/change_detection/array_changes_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"angular2/test/change_detection/array_changes_spec.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe,\n  it,\n  iit,\n  xit,\n  expect,\n  beforeEach,\n  afterEach} from 'angular2/test_lib';\nimport {ArrayChanges} from 'angular2/src/change_detection/array_changes';\nimport {NumberWrapper} from 'angular2/src/facade/lang';\nimport {ListWrapper,\n  MapWrapper} from 'angular2/src/facade/collection';\nimport {TestIterable} from './iterable';\nimport {arrayChangesAsString} from './util';\nexport function main() {\n  describe('collection_changes', function() {\n    describe('CollectionChanges', function() {\n      var changes;\n      var l;\n      beforeEach(() => {\n        changes = new ArrayChanges();\n      });\n      afterEach(() => {\n        changes = null;\n      });\n      it('should support list and iterables', () => {\n        expect(ArrayChanges.supports([])).toBeTruthy();\n        expect(ArrayChanges.supports(new TestIterable())).toBeTruthy();\n        expect(ArrayChanges.supports(MapWrapper.create())).toBeFalsy();\n        expect(ArrayChanges.supports(null)).toBeFalsy();\n      });\n      it('should support iterables', () => {\n        l = new TestIterable();\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({collection: []}));\n        l.list = [1];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['1[null->0]'],\n          additions: ['1[null->0]']\n        }));\n        l.list = [2, 1];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[null->0]', '1[0->1]'],\n          previous: ['1[0->1]'],\n          additions: ['2[null->0]'],\n          moves: ['1[0->1]']\n        }));\n      });\n      it('should detect additions', () => {\n        l = [];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({collection: []}));\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a[null->0]'],\n          additions: ['a[null->0]']\n        }));\n        ListWrapper.push(l, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]'],\n          previous: ['a'],\n          additions: ['b[null->1]']\n        }));\n      });\n      it('should support changing the reference', () => {\n        l = [0];\n        changes.check(l);\n        l = [1, 0];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['1[null->0]', '0[0->1]'],\n          previous: ['0[0->1]'],\n          additions: ['1[null->0]'],\n          moves: ['0[0->1]']\n        }));\n        l = [2, 1, 0];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[null->0]', '1[0->1]', '0[1->2]'],\n          previous: ['1[0->1]', '0[1->2]'],\n          additions: ['2[null->0]'],\n          moves: ['1[0->1]', '0[1->2]']\n        }));\n      });\n      it('should handle swapping element', () => {\n        l = [1, 2];\n        changes.check(l);\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 2);\n        ListWrapper.push(l, 1);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[1->0]', '1[0->1]'],\n          previous: ['1[0->1]', '2[1->0]'],\n          moves: ['2[1->0]', '1[0->1]']\n        }));\n      });\n      it('should handle swapping element', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n        ListWrapper.removeAt(l, 1);\n        ListWrapper.insert(l, 0, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[1->0]', 'a[0->1]', 'c'],\n          previous: ['a[0->1]', 'b[1->0]', 'c'],\n          moves: ['b[1->0]', 'a[0->1]']\n        }));\n        ListWrapper.removeAt(l, 1);\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b', 'c[2->1]', 'a[1->2]'],\n          previous: ['b', 'a[1->2]', 'c[2->1]'],\n          moves: ['c[2->1]', 'a[1->2]']\n        }));\n      });\n      it('should detect changes in list', () => {\n        l = [];\n        changes.check(l);\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a[null->0]'],\n          additions: ['a[null->0]']\n        }));\n        ListWrapper.push(l, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]'],\n          previous: ['a'],\n          additions: ['b[null->1]']\n        }));\n        ListWrapper.push(l, 'c');\n        ListWrapper.push(l, 'd');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b', 'c[null->2]', 'd[null->3]'],\n          previous: ['a', 'b'],\n          additions: ['c[null->2]', 'd[null->3]']\n        }));\n        ListWrapper.removeAt(l, 2);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b', 'd[3->2]'],\n          previous: ['a', 'b', 'c[2->null]', 'd[3->2]'],\n          moves: ['d[3->2]'],\n          removals: ['c[2->null]']\n        }));\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 'd');\n        ListWrapper.push(l, 'c');\n        ListWrapper.push(l, 'b');\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['d[2->0]', 'c[null->1]', 'b[1->2]', 'a[0->3]'],\n          previous: ['a[0->3]', 'b[1->2]', 'd[2->0]'],\n          additions: ['c[null->1]'],\n          moves: ['d[2->0]', 'b[1->2]', 'a[0->3]']\n        }));\n      });\n      it('should test string by value rather than by reference (Dart)', () => {\n        l = ['a', 'boo'];\n        changes.check(l);\n        var b = 'b';\n        var oo = 'oo';\n        ListWrapper.set(l, 1, b + oo);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'boo'],\n          previous: ['a', 'boo']\n        }));\n      });\n      it('should ignore [NaN] != [NaN] (JS)', () => {\n        l = [NumberWrapper.NaN];\n        changes.check(l);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: [NumberWrapper.NaN],\n          previous: [NumberWrapper.NaN]\n        }));\n      });\n      it('should detect [NaN] moves', () => {\n        l = [NumberWrapper.NaN, NumberWrapper.NaN];\n        changes.check(l);\n        ListWrapper.insert(l, 0, 'foo');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['foo[null->0]', 'NaN[0->1]', 'NaN[1->2]'],\n          previous: ['NaN[0->1]', 'NaN[1->2]'],\n          additions: ['foo[null->0]'],\n          moves: ['NaN[0->1]', 'NaN[1->2]']\n        }));\n      });\n      it('should remove and add same item', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n        ListWrapper.removeAt(l, 1);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'c[2->1]'],\n          previous: ['a', 'b[1->null]', 'c[2->1]'],\n          moves: ['c[2->1]'],\n          removals: ['b[1->null]']\n        }));\n        ListWrapper.insert(l, 1, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]', 'c[1->2]'],\n          previous: ['a', 'c[1->2]'],\n          additions: ['b[null->1]'],\n          moves: ['c[1->2]']\n        }));\n      });\n      it('should support duplicates', () => {\n        l = ['a', 'a', 'a', 'b', 'b'];\n        changes.check(l);\n        ListWrapper.removeAt(l, 0);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'a', 'b[3->2]', 'b[4->3]'],\n          previous: ['a', 'a', 'a[2->null]', 'b[3->2]', 'b[4->3]'],\n          moves: ['b[3->2]', 'b[4->3]'],\n          removals: ['a[2->null]']\n        }));\n      });\n      it('should support insertions/moves', () => {\n        l = ['a', 'a', 'b', 'b'];\n        changes.check(l);\n        ListWrapper.insert(l, 0, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[2->0]', 'a[0->1]', 'a[1->2]', 'b', 'b[null->4]'],\n          previous: ['a[0->1]', 'a[1->2]', 'b[2->0]', 'b'],\n          additions: ['b[null->4]'],\n          moves: ['b[2->0]', 'a[0->1]', 'a[1->2]']\n        }));\n      });\n      it('should not report unnecessary moves', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 'b');\n        ListWrapper.push(l, 'a');\n        ListWrapper.push(l, 'c');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[1->0]', 'a[0->1]', 'c'],\n          previous: ['a[0->1]', 'b[1->0]', 'c'],\n          moves: ['b[1->0]', 'a[0->1]']\n        }));\n      });\n    });\n  });\n}\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/test/change_detection/array_changes_spec.map\n\n//# sourceMappingURL=./array_changes_spec.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}