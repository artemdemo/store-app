{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/change_detection/parser/parser_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/27"],"names":[],"mappings":"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","file":"angular2/test/change_detection/parser/parser_spec.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe,\n  describe,\n  it,\n  xit,\n  iit,\n  expect,\n  beforeEach} from 'angular2/test_lib';\nimport {BaseException,\n  isBlank,\n  isPresent} from 'angular2/src/facade/lang';\nimport {reflector} from 'angular2/src/reflection/reflection';\nimport {MapWrapper,\n  ListWrapper} from 'angular2/src/facade/collection';\nimport {Parser} from 'angular2/src/change_detection/parser/parser';\nimport {Lexer} from 'angular2/src/change_detection/parser/lexer';\nimport {ContextWithVariableBindings} from 'angular2/src/change_detection/parser/context_with_variable_bindings';\nimport {Formatter,\n  LiteralPrimitive} from 'angular2/src/change_detection/parser/ast';\nclass TestData {\n  constructor(a, b, fnReturnValue) {\n    this.a = a;\n    this.b = b;\n    this.fnReturnValue = fnReturnValue;\n  }\n  fn() {\n    return this.fnReturnValue;\n  }\n  add(a, b) {\n    return a + b;\n  }\n}\nexport function main() {\n  function td(a = 0, b = 0, fnReturnValue = \"constant\") {\n    return new TestData(a, b, fnReturnValue);\n  }\n  function createParser() {\n    return new Parser(new Lexer(), reflector);\n  }\n  function parseAction(text, location = null) {\n    return createParser().parseAction(text, location);\n  }\n  function parseBinding(text, location = null) {\n    return createParser().parseBinding(text, location);\n  }\n  function parseTemplateBindings(text, location = null) {\n    return createParser().parseTemplateBindings(text, location);\n  }\n  function parseInterpolation(text, location = null) {\n    return createParser().parseInterpolation(text, location);\n  }\n  function expectEval(text, passedInContext = null) {\n    var c = isBlank(passedInContext) ? td() : passedInContext;\n    return expect(parseAction(text).eval(c));\n  }\n  function expectEvalError(text, passedInContext = null) {\n    var c = isBlank(passedInContext) ? td() : passedInContext;\n    return expect(() => parseAction(text).eval(c));\n  }\n  function evalAsts(asts, passedInContext = null) {\n    var c = isBlank(passedInContext) ? td() : passedInContext;\n    var res = [];\n    for (var i = 0; i < asts.length; i++) {\n      ListWrapper.push(res, asts[i].eval(c));\n    }\n    return res;\n  }\n  describe(\"parser\", () => {\n    describe(\"parseAction\", () => {\n      describe(\"basic expressions\", () => {\n        it('should parse numerical expressions', () => {\n          expectEval(\"1\").toEqual(1);\n        });\n        it('should parse strings', () => {\n          expectEval(\"'1'\").toEqual('1');\n          expectEval('\"1\"').toEqual('1');\n        });\n        it('should parse null', () => {\n          expectEval(\"null\").toBe(null);\n        });\n        it('should parse unary - expressions', () => {\n          expectEval(\"-1\").toEqual(-1);\n          expectEval(\"+1\").toEqual(1);\n        });\n        it('should parse unary ! expressions', () => {\n          expectEval(\"!true\").toEqual(!true);\n          expectEval(\"!!true\").toEqual(!!true);\n        });\n        it('should parse multiplicative expressions', () => {\n          expectEval(\"3*4/2%5\").toEqual(3 * 4 / 2 % 5);\n        });\n        it('should parse additive expressions', () => {\n          expectEval(\"3+6-2\").toEqual(3 + 6 - 2);\n        });\n        it('should parse relational expressions', () => {\n          expectEval(\"2<3\").toEqual(2 < 3);\n          expectEval(\"2>3\").toEqual(2 > 3);\n          expectEval(\"2<=2\").toEqual(2 <= 2);\n          expectEval(\"2>=2\").toEqual(2 >= 2);\n        });\n        it('should parse equality expressions', () => {\n          expectEval(\"2==3\").toEqual(2 == 3);\n          expectEval(\"2!=3\").toEqual(2 != 3);\n        });\n        it('should parse logicalAND expressions', () => {\n          expectEval(\"true&&true\").toEqual(true && true);\n          expectEval(\"true&&false\").toEqual(true && false);\n        });\n        it('should parse logicalOR expressions', () => {\n          expectEval(\"false||true\").toEqual(false || true);\n          expectEval(\"false||false\").toEqual(false || false);\n        });\n        it('should short-circuit AND operator', () => {\n          expectEval('false && a()', td(() => {\n            throw \"BOOM\";\n          })).toBe(false);\n        });\n        it('should short-circuit OR operator', () => {\n          expectEval('true || a()', td(() => {\n            throw \"BOOM\";\n          })).toBe(true);\n        });\n        it('should evaluate grouped expressions', () => {\n          expectEval(\"(1+2)*3\").toEqual((1 + 2) * 3);\n        });\n        it('should parse an empty string', () => {\n          expectEval('').toBeNull();\n        });\n      });\n      describe(\"literals\", () => {\n        it('should evaluate array', () => {\n          expectEval(\"[1][0]\").toEqual(1);\n          expectEval(\"[[1]][0][0]\").toEqual(1);\n          expectEval(\"[]\").toEqual([]);\n          expectEval(\"[].length\").toEqual(0);\n          expectEval(\"[1, 2].length\").toEqual(2);\n        });\n        it('should evaluate map', () => {\n          expectEval(\"{}\").toEqual({});\n          expectEval(\"{a:'b'}['a']\").toEqual('b');\n          expectEval(\"{'a':'b'}['a']\").toEqual('b');\n          expectEval(\"{\\\"a\\\":'b'}['a']\").toEqual('b');\n          expectEval(\"{\\\"a\\\":'b'}['a']\").toEqual(\"b\");\n          expectEval(\"{}['a']\").not.toBeDefined();\n          expectEval(\"{\\\"a\\\":'b'}['invalid']\").not.toBeDefined();\n        });\n        it('should only allow identifier, string, or keyword as map key', () => {\n          expectEvalError('{(:0}').toThrowError(new RegExp('expected identifier, keyword, or string'));\n          expectEvalError('{1234:0}').toThrowError(new RegExp('expected identifier, keyword, or string'));\n        });\n      });\n      describe(\"member access\", () => {\n        it(\"should parse field access\", () => {\n          expectEval(\"a\", td(999)).toEqual(999);\n          expectEval(\"a.a\", td(td(999))).toEqual(999);\n        });\n        it('should throw when accessing a field on null', () => {\n          expectEvalError(\"a.a.a\").toThrowError();\n        });\n        it('should only allow identifier or keyword as member names', () => {\n          expectEvalError('x.(').toThrowError(new RegExp('identifier or keyword'));\n          expectEvalError('x. 1234').toThrowError(new RegExp('identifier or keyword'));\n          expectEvalError('x.\"foo\"').toThrowError(new RegExp('identifier or keyword'));\n        });\n        it(\"should read a field from ContextWithVariableBindings\", () => {\n          var locals = new ContextWithVariableBindings(null, MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n          expectEval(\"key\", locals).toEqual(\"value\");\n        });\n        it(\"should handle nested ContextWithVariableBindings\", () => {\n          var nested = new ContextWithVariableBindings(null, MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n          var locals = new ContextWithVariableBindings(nested, MapWrapper.create());\n          expectEval(\"key\", locals).toEqual(\"value\");\n        });\n        it(\"should fall back to a regular field read when ContextWithVariableBindings \" + \"does not have the requested field\", () => {\n          var locals = new ContextWithVariableBindings(td(999), MapWrapper.create());\n          expectEval(\"a\", locals).toEqual(999);\n        });\n      });\n      describe(\"method calls\", () => {\n        it(\"should evaluate method calls\", () => {\n          expectEval(\"fn()\", td(0, 0, \"constant\")).toEqual(\"constant\");\n          expectEval(\"add(1,2)\").toEqual(3);\n          expectEval(\"a.add(1,2)\", td(td())).toEqual(3);\n          expectEval(\"fn().add(1,2)\", td(0, 0, td())).toEqual(3);\n        });\n        it('should throw when no method', () => {\n          expectEvalError(\"blah()\").toThrowError();\n        });\n        it('should evaluate a method from ContextWithVariableBindings', () => {\n          var context = new ContextWithVariableBindings(td(0, 0, 'parent'), MapWrapper.createFromPairs([['fn', () => 'child']]));\n          expectEval(\"fn()\", context).toEqual('child');\n        });\n        it('should fall back to the parent context when ContextWithVariableBindings does not ' + 'have the requested method', () => {\n          var context = new ContextWithVariableBindings(td(0, 0, 'parent'), MapWrapper.create());\n          expectEval(\"fn()\", context).toEqual('parent');\n        });\n      });\n      describe(\"functional calls\", () => {\n        it(\"should evaluate function calls\", () => {\n          expectEval(\"fn()(1,2)\", td(0, 0, (a, b) => a + b)).toEqual(3);\n        });\n        it('should throw on non-function function calls', () => {\n          expectEvalError(\"4()\").toThrowError(new RegExp('4 is not a function'));\n        });\n        it('should parse functions for object indices', () => {\n          expectEval('a[b()]()', td([() => 6], () => 0)).toEqual(6);\n        });\n      });\n      describe(\"conditional\", () => {\n        it('should parse ternary/conditional expressions', () => {\n          expectEval(\"7==3+4?10:20\").toEqual(10);\n          expectEval(\"false?10:20\").toEqual(20);\n        });\n        it('should throw on incorrect ternary operator syntax', () => {\n          expectEvalError(\"true?1\").toThrowError(new RegExp('Parser Error: Conditional expression true\\\\?1 requires all 3 expressions'));\n        });\n      });\n      describe(\"assignment\", () => {\n        it(\"should support field assignments\", () => {\n          var context = td();\n          expectEval(\"a=12\", context).toEqual(12);\n          expect(context.a).toEqual(12);\n        });\n        it(\"should support nested field assignments\", () => {\n          var context = td(td(td()));\n          expectEval(\"a.a.a=123;\", context).toEqual(123);\n          expect(context.a.a.a).toEqual(123);\n        });\n        it(\"should support multiple assignments\", () => {\n          var context = td();\n          expectEval(\"a=123; b=234\", context).toEqual(234);\n          expect(context.a).toEqual(123);\n          expect(context.b).toEqual(234);\n        });\n        it(\"should support array updates\", () => {\n          var context = td([100]);\n          expectEval('a[0] = 200', context).toEqual(200);\n          expect(context.a[0]).toEqual(200);\n        });\n        it(\"should support map updates\", () => {\n          var context = td({\"key\": 100});\n          expectEval('a[\"key\"] = 200', context).toEqual(200);\n          expect(context.a[\"key\"]).toEqual(200);\n        });\n        it(\"should support array/map updates\", () => {\n          var context = td([{\"key\": 100}]);\n          expectEval('a[0][\"key\"] = 200', context).toEqual(200);\n          expect(context.a[0][\"key\"]).toEqual(200);\n        });\n        it('should allow assignment after array dereference', () => {\n          var context = td([td()]);\n          expectEval('a[0].a = 200', context).toEqual(200);\n          expect(context.a[0].a).toEqual(200);\n        });\n        it('should throw on bad assignment', () => {\n          expectEvalError(\"5=4\").toThrowError(new RegExp(\"Expression 5 is not assignable\"));\n        });\n        it('should reassign when no variable binding with the given name', () => {\n          var context = td();\n          var locals = new ContextWithVariableBindings(context, MapWrapper.create());\n          expectEval('a = 200', locals).toEqual(200);\n          expect(context.a).toEqual(200);\n        });\n        it('should throw when reassigning a variable binding', () => {\n          var locals = new ContextWithVariableBindings(null, MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n          expectEvalError('key = 200', locals).toThrowError(new RegExp(\"Cannot reassign a variable binding\"));\n        });\n      });\n      describe(\"general error handling\", () => {\n        it(\"should throw on an unexpected token\", () => {\n          expectEvalError(\"[1,2] trac\").toThrowError(new RegExp('Unexpected token \\'trac\\''));\n        });\n        it('should throw a reasonable error for unconsumed tokens', () => {\n          expectEvalError(\")\").toThrowError(new RegExp(\"Unexpected token \\\\) at column 1 in \\\\[\\\\)\\\\]\"));\n        });\n        it('should throw on missing expected token', () => {\n          expectEvalError(\"a(b\").toThrowError(new RegExp(\"Missing expected \\\\) at the end of the expression \\\\[a\\\\(b\\\\]\"));\n        });\n      });\n      it(\"should error when using formatters\", () => {\n        expectEvalError('x|blah').toThrowError(new RegExp('Cannot have a formatter'));\n      });\n      it('should pass exceptions', () => {\n        expect(() => {\n          parseAction('a()').eval(td(() => {\n            throw new BaseException(\"boo to you\");\n          }));\n        }).toThrowError('boo to you');\n      });\n      describe(\"multiple statements\", () => {\n        it(\"should return the last non-blank value\", () => {\n          expectEval(\"a=1;b=3;a+b\").toEqual(4);\n          expectEval(\"1;;\").toEqual(1);\n        });\n      });\n      it('should store the source in the result', () => {\n        expect(parseAction('someExpr').source).toBe('someExpr');\n      });\n      it('should store the passed-in location', () => {\n        expect(parseAction('someExpr', 'location').location).toBe('location');\n      });\n    });\n    describe(\"parseBinding\", () => {\n      describe(\"formatters\", () => {\n        it(\"should parse formatters\", () => {\n          var exp = parseBinding(\"'Foo'|uppercase\").ast;\n          expect(exp).toBeAnInstanceOf(Formatter);\n          expect(exp.name).toEqual(\"uppercase\");\n        });\n        it(\"should parse formatters with args\", () => {\n          var exp = parseBinding(\"1|increment:2\").ast;\n          expect(exp).toBeAnInstanceOf(Formatter);\n          expect(exp.name).toEqual(\"increment\");\n          expect(exp.args[0]).toBeAnInstanceOf(LiteralPrimitive);\n        });\n        it('should only allow identifier or keyword as formatter names', () => {\n          expect(() => parseBinding('\"Foo\"|(')).toThrowError(new RegExp('identifier or keyword'));\n          expect(() => parseBinding('\"Foo\"|1234')).toThrowError(new RegExp('identifier or keyword'));\n          expect(() => parseBinding('\"Foo\"|\"uppercase\"')).toThrowError(new RegExp('identifier or keyword'));\n        });\n      });\n      it('should store the source in the result', () => {\n        expect(parseBinding('someExpr').source).toBe('someExpr');\n      });\n      it('should store the passed-in location', () => {\n        expect(parseBinding('someExpr', 'location').location).toBe('location');\n      });\n      it('should throw on chain expressions', () => {\n        expect(() => parseBinding(\"1;2\")).toThrowError(new RegExp(\"contain chained expression\"));\n      });\n      it('should throw on assignmnt', () => {\n        expect(() => parseBinding(\"1;2\")).toThrowError(new RegExp(\"contain chained expression\"));\n      });\n    });\n    describe('parseTemplateBindings', () => {\n      function keys(templateBindings) {\n        return ListWrapper.map(templateBindings, (binding) => binding.key);\n      }\n      function keyValues(templateBindings) {\n        return ListWrapper.map(templateBindings, (binding) => {\n          if (binding.keyIsVar) {\n            return '#' + binding.key + (isBlank(binding.name) ? '' : '=' + binding.name);\n          } else {\n            return binding.key + (isBlank(binding.expression) ? '' : `=${binding.expression}`);\n          }\n        });\n      }\n      function exprSources(templateBindings) {\n        return ListWrapper.map(templateBindings, (binding) => isPresent(binding.expression) ? binding.expression.source : null);\n      }\n      function exprAsts(templateBindings) {\n        return ListWrapper.map(templateBindings, (binding) => isPresent(binding.expression) ? binding.expression : null);\n      }\n      it('should parse an empty string', () => {\n        var bindings = parseTemplateBindings('');\n        expect(bindings).toEqual([]);\n      });\n      it('should parse a string without a value', () => {\n        var bindings = parseTemplateBindings('a');\n        expect(keys(bindings)).toEqual(['a']);\n      });\n      it('should only allow identifier, string, or keyword including dashes as keys', () => {\n        var bindings = parseTemplateBindings(\"a:'b'\");\n        expect(keys(bindings)).toEqual(['a']);\n        bindings = parseTemplateBindings(\"'a':'b'\");\n        expect(keys(bindings)).toEqual(['a']);\n        bindings = parseTemplateBindings(\"\\\"a\\\":'b'\");\n        expect(keys(bindings)).toEqual(['a']);\n        bindings = parseTemplateBindings(\"a-b:'c'\");\n        expect(keys(bindings)).toEqual(['a-b']);\n        expect(() => {\n          parseTemplateBindings('(:0');\n        }).toThrowError(new RegExp('expected identifier, keyword, or string'));\n        expect(() => {\n          parseTemplateBindings('1234:0');\n        }).toThrowError(new RegExp('expected identifier, keyword, or string'));\n      });\n      it('should detect expressions as value', () => {\n        var bindings = parseTemplateBindings(\"a:b\");\n        expect(exprSources(bindings)).toEqual(['b']);\n        expect(evalAsts(exprAsts(bindings), td(0, 23))).toEqual([23]);\n        bindings = parseTemplateBindings(\"a:1+1\");\n        expect(exprSources(bindings)).toEqual(['1+1']);\n        expect(evalAsts(exprAsts(bindings))).toEqual([2]);\n      });\n      it('should detect names as value', () => {\n        var bindings = parseTemplateBindings(\"a:#b\");\n        expect(keyValues(bindings)).toEqual(['a', '#b']);\n      });\n      it('should allow space and colon as separators', () => {\n        var bindings = parseTemplateBindings(\"a:b\");\n        expect(keys(bindings)).toEqual(['a']);\n        expect(exprSources(bindings)).toEqual(['b']);\n        bindings = parseTemplateBindings(\"a b\");\n        expect(keys(bindings)).toEqual(['a']);\n        expect(exprSources(bindings)).toEqual(['b']);\n      });\n      it('should allow multiple pairs', () => {\n        var bindings = parseTemplateBindings(\"a 1 b 2\");\n        expect(keys(bindings)).toEqual(['a', 'b']);\n        expect(exprSources(bindings)).toEqual(['1 ', '2']);\n      });\n      it('should store the sources in the result', () => {\n        var bindings = parseTemplateBindings(\"a 1,b 2\");\n        expect(bindings[0].expression.source).toEqual('1');\n        expect(bindings[1].expression.source).toEqual('2');\n      });\n      it('should store the passed-in location', () => {\n        var bindings = parseTemplateBindings(\"a 1,b 2\", 'location');\n        expect(bindings[0].expression.location).toEqual('location');\n      });\n      it('should support var/# notation', () => {\n        var bindings = parseTemplateBindings(\"var i\");\n        expect(keyValues(bindings)).toEqual(['#i']);\n        bindings = parseTemplateBindings(\"#i\");\n        expect(keyValues(bindings)).toEqual(['#i']);\n        bindings = parseTemplateBindings(\"var i-a = k-a\");\n        expect(keyValues(bindings)).toEqual(['#i-a=k-a']);\n        bindings = parseTemplateBindings(\"keyword var item; var i = k\");\n        expect(keyValues(bindings)).toEqual(['keyword', '#item=\\$implicit', '#i=k']);\n        bindings = parseTemplateBindings(\"keyword: #item; #i = k\");\n        expect(keyValues(bindings)).toEqual(['keyword', '#item=\\$implicit', '#i=k']);\n        bindings = parseTemplateBindings(\"directive: var item in expr; var a = b\", 'location');\n        expect(keyValues(bindings)).toEqual(['directive', '#item=\\$implicit', 'in=expr in location', '#a=b']);\n      });\n    });\n    describe('parseInterpolation', () => {\n      it('should return null if no interpolation', () => {\n        expect(parseInterpolation('nothing')).toBe(null);\n      });\n      it('should parse no prefix/suffix interpolation', () => {\n        var ast = parseInterpolation('{{a}}').ast;\n        expect(ast.strings).toEqual(['', '']);\n        expect(ast.expressions.length).toEqual(1);\n        expect(ast.expressions[0].name).toEqual('a');\n      });\n      it('should parse prefix/suffix with multiple interpolation', () => {\n        var ast = parseInterpolation('before{{a}}middle{{b}}after').ast;\n        expect(ast.strings).toEqual(['before', 'middle', 'after']);\n        expect(ast.expressions.length).toEqual(2);\n        expect(ast.expressions[0].name).toEqual('a');\n        expect(ast.expressions[1].name).toEqual('b');\n      });\n    });\n    describe('wrapLiteralPrimitive', () => {\n      it('should wrap a literal primitive', () => {\n        expect(createParser().wrapLiteralPrimitive(\"foo\", null).eval(null)).toEqual(\"foo\");\n      });\n    });\n  });\n}\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/test/change_detection/parser/parser_spec.map\n\n//# sourceMappingURL=./parser_spec.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()"]}