{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/core/compiler/pipeline/text_interpolation_parser_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"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","file":"angular2/test/core/compiler/pipeline/text_interpolation_parser_spec.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {assert} from \"rtts_assert/rtts_assert\";\nimport {describe,\n  beforeEach,\n  expect,\n  it,\n  iit,\n  ddescribe,\n  el} from 'angular2/test_lib';\nimport {TextInterpolationParser} from 'angular2/src/core/compiler/pipeline/text_interpolation_parser';\nimport {CompilePipeline} from 'angular2/src/core/compiler/pipeline/compile_pipeline';\nimport {DOM} from 'angular2/src/facade/dom';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {Lexer,\n  Parser} from 'angular2/change_detection';\nimport {CompileElement} from 'angular2/src/core/compiler/pipeline/compile_element';\nimport {CompileStep} from 'angular2/src/core/compiler/pipeline/compile_step';\nimport {CompileControl} from 'angular2/src/core/compiler/pipeline/compile_control';\nimport {IgnoreChildrenStep} from './pipeline_spec';\nexport function main() {\n  describe('TextInterpolationParser', () => {\n    function createPipeline(ignoreBindings = false) {\n      return new CompilePipeline([new MockStep((parent, current, control) => {\n        current.ignoreBindings = ignoreBindings;\n      }), new IgnoreChildrenStep(), new TextInterpolationParser(new Parser(new Lexer()), null)]);\n    }\n    it('should not look for text interpolation when ignoreBindings is true', () => {\n      var results = createPipeline(true).process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'));\n      expect(results[0].textNodeBindings).toBe(null);\n    });\n    it('should find text interpolation in normal elements', () => {\n      var results = createPipeline().process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}\");\n      expect(MapWrapper.get(bindings, 2).source).toEqual(\"{{expr2}}\");\n    });\n    it('should find text interpolation in template elements', () => {\n      var results = createPipeline().process(el('<template>{{expr1}}<span></span>{{expr2}}</template>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}\");\n      expect(MapWrapper.get(bindings, 2).source).toEqual(\"{{expr2}}\");\n    });\n    it('should allow multiple expressions', () => {\n      var results = createPipeline().process(el('<div>{{expr1}}{{expr2}}</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}{{expr2}}\");\n    });\n    it('should not interpolate when compileChildren is false', () => {\n      var results = createPipeline().process(el('<div>{{included}}<span ignore-children>{{excluded}}</span></div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{included}}\");\n      expect(results[1].textNodeBindings).toBe(null);\n    });\n    it('should allow fixed text before, in between and after expressions', () => {\n      var results = createPipeline().process(el('<div>a{{expr1}}b{{expr2}}c</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"a{{expr1}}b{{expr2}}c\");\n    });\n    it('should escape quotes in fixed parts', () => {\n      var results = createPipeline().process(el(\"<div>'\\\"a{{expr1}}</div>\"));\n      expect(MapWrapper.get(results[0].textNodeBindings, 0).source).toEqual(\"'\\\"a{{expr1}}\");\n    });\n  });\n}\nclass MockStep extends CompileStep {\n  constructor(process) {\n    super();\n    this.processClosure = process;\n  }\n  process(parent, current, control) {\n    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);\n    this.processClosure(parent, current, control);\n  }\n}\nObject.defineProperty(MockStep.prototype.process, \"parameters\", {get: function() {\n    return [[CompileElement], [CompileElement], [CompileControl]];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/test/core/compiler/pipeline/text_interpolation_parser_spec.map\n\n//# sourceMappingURL=./text_interpolation_parser_spec.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)"]}