{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/mock/xhr_mock_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"angular2/test/mock/xhr_mock_spec.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {assert} from \"rtts_assert/rtts_assert\";\nimport {describe,\n  beforeEach,\n  it,\n  expect,\n  ddescribe,\n  iit,\n  el,\n  IS_DARTIUM} from 'angular2/test_lib';\nimport {XHRMock} from 'angular2/src/mock/xhr_mock';\nimport {PromiseWrapper,\n  Promise} from 'angular2/src/facade/async';\nimport {isPresent} from 'angular2/src/facade/lang';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nexport function main() {\n  describe('XHRMock', () => {\n    var xhr;\n    beforeEach(() => {\n      xhr = new XHRMock();\n    });\n    function expectResponse(request, url, response, done = null) {\n      assert.argumentTypes(request, Promise, url, assert.type.string, response, assert.type.string, done, assert.type.any);\n      function onResponse(text) {\n        assert.argumentTypes(text, assert.type.string);\n        if (response === null) {\n          throw `Unexpected response ${url} -> ${text}`;\n        } else {\n          expect(text).toEqual(response);\n          if (isPresent(done))\n            done();\n        }\n      }\n      Object.defineProperty(onResponse, \"parameters\", {get: function() {\n          return [[assert.type.string]];\n        }});\n      function onError(error) {\n        assert.argumentTypes(error, assert.type.string);\n        if (response !== null) {\n          throw `Unexpected error ${url}`;\n        } else {\n          expect(error).toEqual(`Failed to load ${url}`);\n          if (isPresent(done))\n            done();\n        }\n      }\n      Object.defineProperty(onError, \"parameters\", {get: function() {\n          return [[assert.type.string]];\n        }});\n      PromiseWrapper.then(request, onResponse, onError);\n    }\n    Object.defineProperty(expectResponse, \"parameters\", {get: function() {\n        return [[Promise], [assert.type.string], [assert.type.string], []];\n      }});\n    it('should return a response from the definitions', (done) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n    it('should return an error from the definitions', (done) => {\n      var url = '/foo';\n      var response = null;\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n    it('should return a response from the expectations', (done) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n    it('should return an error from the expectations', (done) => {\n      var url = '/foo';\n      var response = null;\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n    it('should not reuse expectations', () => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      xhr.get(url);\n      xhr.get(url);\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n    it('should return expectations before definitions', (done) => {\n      var url = '/foo';\n      xhr.when(url, 'when');\n      xhr.expect(url, 'expect');\n      expectResponse(xhr.get(url), url, 'expect');\n      expectResponse(xhr.get(url), url, 'when', done);\n      xhr.flush();\n    });\n    it('should throw when there is no definitions or expectations', () => {\n      xhr.get('/foo');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n    it('should throw when flush is called without any pending requests', () => {\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('No pending requests to flush');\n    });\n    it('should throw on unstatisfied expectations', () => {\n      xhr.expect('/foo', 'bar');\n      xhr.when('/bar', 'foo');\n      xhr.get('/bar');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unsatisfied requests: /foo');\n    });\n  });\n}\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/test/mock/xhr_mock_spec.map\n\n//# sourceMappingURL=./xhr_mock_spec.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}