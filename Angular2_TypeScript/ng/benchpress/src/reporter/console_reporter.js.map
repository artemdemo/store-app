{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","benchpress/src/reporter/console_reporter.js","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"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","file":"benchpress/src/reporter/console_reporter.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {assert} from \"rtts_assert/rtts_assert\";\nimport {print,\n  isPresent,\n  isBlank} from 'angular2/src/facade/lang';\nimport {StringMapWrapper,\n  ListWrapper,\n  List} from 'angular2/src/facade/collection';\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nimport {Math} from 'angular2/src/facade/math';\nimport {bind,\n  OpaqueToken} from 'angular2/di';\nimport {Statistic} from '../statistic';\nimport {Reporter} from '../reporter';\nimport {SampleDescription} from '../sample_description';\nimport {MeasureValues} from '../measure_values';\nexport class ConsoleReporter extends Reporter {\n  static get PRINT() {\n    return _PRINT;\n  }\n  static get COLUMN_WIDTH() {\n    return _COLUMN_WIDTH;\n  }\n  static get BINDINGS() {\n    return _BINDINGS;\n  }\n  static _lpad(value, columnWidth, fill = ' ') {\n    var result = '';\n    for (var i = 0; i < columnWidth - value.length; i++) {\n      result += fill;\n    }\n    return result + value;\n  }\n  static _formatNum(num) {\n    var result;\n    if (num === 0) {\n      result = '000';\n    } else {\n      result = `${Math.floor(num * 100)}`;\n    }\n    return result.substring(0, result.length - 2) + '.' + result.substring(result.length - 2);\n  }\n  static _sortedProps(obj) {\n    var props = [];\n    StringMapWrapper.forEach(obj, (value, prop) => ListWrapper.push(props, prop));\n    props.sort();\n    return props;\n  }\n  constructor(columnWidth, sampleDescription, print) {\n    super();\n    this._columnWidth = columnWidth;\n    this._metricNames = ConsoleReporter._sortedProps(sampleDescription.metrics);\n    this._print = print;\n    this._printDescription(sampleDescription);\n  }\n  _printDescription(sampleDescription) {\n    this._print(`BENCHMARK ${sampleDescription.id}`);\n    this._print('Description:');\n    var props = ConsoleReporter._sortedProps(sampleDescription.description);\n    props.forEach((prop) => {\n      this._print(`- ${prop}: ${sampleDescription.description[prop]}`);\n    });\n    this._print('Metrics:');\n    this._metricNames.forEach((metricName) => {\n      this._print(`- ${metricName}: ${sampleDescription.metrics[metricName]}`);\n    });\n    this._print('');\n    this._printStringRow(this._metricNames);\n    this._printStringRow(this._metricNames.map((_) => ''), '-');\n  }\n  reportMeasureValues(measureValues) {\n    assert.argumentTypes(measureValues, MeasureValues);\n    var formattedValues = ListWrapper.map(this._metricNames, (metricName) => {\n      var value = measureValues.values[metricName];\n      return ConsoleReporter._formatNum(value);\n    });\n    this._printStringRow(formattedValues);\n    return assert.returnType((PromiseWrapper.resolve(null)), Promise);\n  }\n  reportSample(completeSample, validSample) {\n    this._printStringRow(this._metricNames.map((_) => ''), '=');\n    this._printStringRow(ListWrapper.map(this._metricNames, (metricName) => {\n      var sample = ListWrapper.map(validSample, (measureValues) => measureValues.values[metricName]);\n      var mean = Statistic.calculateMean(sample);\n      var cv = Statistic.calculateCoefficientOfVariation(sample, mean);\n      return `${ConsoleReporter._formatNum(mean)}\\u00B1${Math.floor(cv)}%`;\n    }));\n    return assert.returnType((PromiseWrapper.resolve(null)), Promise);\n  }\n  _printStringRow(parts, fill = ' ') {\n    this._print(ListWrapper.map(parts, (part) => {\n      var w = this._columnWidth;\n      return ConsoleReporter._lpad(part, w, fill);\n    }).join(' | '));\n  }\n}\nObject.defineProperty(ConsoleReporter.prototype.reportMeasureValues, \"parameters\", {get: function() {\n    return [[MeasureValues]];\n  }});\nObject.defineProperty(ConsoleReporter.prototype.reportSample, \"parameters\", {get: function() {\n    return [[assert.genericType(List, MeasureValues)], [assert.genericType(List, MeasureValues)]];\n  }});\nvar _PRINT = new OpaqueToken('ConsoleReporter.print');\nvar _COLUMN_WIDTH = new OpaqueToken('ConsoleReporter.columnWidht');\nvar _BINDINGS = [bind(Reporter).toFactory((columnWidth, sampleDescription, print) => new ConsoleReporter(columnWidth, sampleDescription, print), [_COLUMN_WIDTH, SampleDescription, _PRINT]), bind(_COLUMN_WIDTH).toValue(18), bind(_PRINT).toValue(print)];\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/benchpress/src/reporter/console_reporter.map\n\n//# sourceMappingURL=./console_reporter.map","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)"]}