{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","benchpress/src/validator/size_validator.js","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,8FAAoB,UAAS,SAAQ;;;;;;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG,CAAG;ACAf,aAAoB,KAAG,OAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,gBAAoB,KAAG,UAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;oBGFY,CAAA,SAAQ,AAAC,mBCAjC,SAAS,QAAO;AACN,AAAI,UAAA,gBCKP,SAAM,cAAY,CAOX,IAAG,CAAG;ACbpB,ADcI,wBCdU,iBAAiB,AAAC,eAAkB,KAAK,MAAmB,CDc/D;AACP,aAAG,YAAY,EAAI,KAAG,CAAC;QDduB,ACehD,CDfiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;ACe5C,iBAAO,CAAP,UAAQ,AAAC,CAAE;AACT,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,CAAC,YAAW,CAAG,CAAA,IAAG,YAAY,CAAC,CAAC,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC;UAC/E;AACA,iBAAO,CAAP,UAAS,cAAa,CAAG;AACvB,iBAAK,cAAc,AAAC,CAAC,cAAa,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC,CAAC;AAC/E,eAAI,cAAa,OAAO,GAAK,CAAA,IAAG,YAAY,CAAG;AAC7C,mBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,WAAU,MAAM,AAAC,CAAC,cAAa,CAAG,CAAA,cAAa,OAAO,EAAI,CAAA,IAAG,YAAY,CAAG,CAAA,cAAa,OAAO,CAAC,CAAC,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YAC3K,KAAO;AACL,mBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,IAAG,CAAC,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YAC7E;AAAA,UACF;AAAA;AApBA,YAAW,SAAO,EAAI;AACpB,iBAAO,UAAQ,CAAC;UAClB;AACA,YAAW,YAAU,EAAI;AACvB,iBAAO,aAAW,CAAC;UACrB;AAAA,SDTgE,SAAO,CAAC,CAAC;MACnE,AAAC,CCE0B,SAAQ,CDFhB,EDJ2C;AE6BtE,WAAK,eAAe,AAAC,CAAC,aAAY,UAAU,SAAS,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACnF,eAAO,EAAC,CAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,CAAA,MAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;mBACc,IAAI,YAAU,AAAC,CAAC,0BAAyB,CAAC;gBAC7C,EAAC,IAAG,AAAC,CAAC,SAAQ,CAAC,UAAU,AAAC,EAAC,SAAC,IAAG;aAAM,IAAI,cAAY,AAAC,CAAC,IAAG,CAAC;MAAA,EAAG,EAAC,YAAW,CAAC,CAAC,CAAG,CAAA,IAAG,AAAC,CAAC,YAAW,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAAC;IL/B9F;EAC3B,CAAA;ADDI,CAAC,CAAC;AMmC8B","file":"benchpress/src/validator/size_validator.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {assert} from \"rtts_assert/rtts_assert\";\nimport {List,\n  ListWrapper} from 'angular2/src/facade/collection';\nimport {bind,\n  OpaqueToken} from 'angular2/di';\nimport {Validator} from '../validator';\nexport class SizeValidator extends Validator {\n  static get BINDINGS() {\n    return _BINDINGS;\n  }\n  static get SAMPLE_SIZE() {\n    return _SAMPLE_SIZE;\n  }\n  constructor(size) {\n    super();\n    this._sampleSize = size;\n  }\n  describe() {\n    return assert.returnType(({'sampleSize': this._sampleSize}), assert.type.any);\n  }\n  validate(completeSample) {\n    assert.argumentTypes(completeSample, assert.genericType(List, assert.type.any));\n    if (completeSample.length >= this._sampleSize) {\n      return assert.returnType((ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length)), assert.genericType(List, assert.type.any));\n    } else {\n      return assert.returnType((null), assert.genericType(List, assert.type.any));\n    }\n  }\n}\nObject.defineProperty(SizeValidator.prototype.validate, \"parameters\", {get: function() {\n    return [[assert.genericType(List, assert.type.any)]];\n  }});\nvar _SAMPLE_SIZE = new OpaqueToken('SizeValidator.sampleSize');\nvar _BINDINGS = [bind(Validator).toFactory((size) => new SizeValidator(size), [_SAMPLE_SIZE]), bind(_SAMPLE_SIZE).toValue(10)];\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/benchpress/src/validator/size_validator.map\n\n//# sourceMappingURL=./size_validator.map","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)"]}