{"version":3,"sources":["@traceur/generated/TemplateParser/22","benchpress/test/runner_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13"],"names":[],"mappings":"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","file":"benchpress/test/runner_spec.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {assert} from \"rtts_assert/rtts_assert\";\nimport {describe,\n  it,\n  iit,\n  xit,\n  expect,\n  beforeEach,\n  afterEach} from 'angular2/test_lib';\nimport {Runner,\n  Sampler,\n  SampleDescription,\n  Validator,\n  bind,\n  Injector,\n  Metric,\n  Options} from 'benchpress/benchpress';\nimport {isBlank} from 'angular2/src/facade/lang';\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nexport function main() {\n  describe('runner', () => {\n    var injector;\n    var runner;\n    function createRunner(defaultBindings = null) {\n      if (isBlank(defaultBindings)) {\n        defaultBindings = [];\n      }\n      runner = new Runner([defaultBindings, bind(Sampler).toFactory((_injector) => {\n        injector = _injector;\n        return new MockSampler();\n      }, [Injector]), bind(Metric).toFactory(() => new MockMetric(), []), bind(Validator).toFactory(() => new MockValidator(), [])]);\n      return runner;\n    }\n    it('should set SampleDescription.id', (done) => {\n      createRunner().sample({id: 'someId'}).then((_) => {\n        expect(injector.get(SampleDescription).id).toBe('someId');\n        done();\n      });\n    });\n    it('should merge SampleDescription.description', (done) => {\n      createRunner([bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 1})]).sample({\n        id: 'someId',\n        bindings: [bind(Options.SAMPLE_DESCRIPTION).toValue({'b': 2})]\n      }).then((_) => {\n        expect(injector.get(SampleDescription).description).toEqual({\n          'forceGc': false,\n          'a': 1,\n          'b': 2,\n          'v': 11\n        });\n        done();\n      });\n    });\n    it('should fill SampleDescription.metrics from the Metric', (done) => {\n      createRunner().sample({id: 'someId'}).then((_) => {\n        expect(injector.get(SampleDescription).metrics).toEqual({'m1': 'some metric'});\n        done();\n      });\n    });\n    it('should bind Options.EXECUTE', (done) => {\n      var execute = () => {};\n      createRunner().sample({\n        id: 'someId',\n        execute: execute\n      }).then((_) => {\n        expect(injector.get(Options.EXECUTE)).toEqual(execute);\n        done();\n      });\n    });\n    it('should bind Options.PREPARE', (done) => {\n      var prepare = () => {};\n      createRunner().sample({\n        id: 'someId',\n        prepare: prepare\n      }).then((_) => {\n        expect(injector.get(Options.PREPARE)).toEqual(prepare);\n        done();\n      });\n    });\n    it('should overwrite bindings per sample call', (done) => {\n      createRunner([bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 1})]).sample({\n        id: 'someId',\n        bindings: [bind(Options.DEFAULT_DESCRIPTION).toValue({'a': 2})]\n      }).then((_) => {\n        expect(injector.get(SampleDescription).description['a']).toBe(2);\n        done();\n      });\n    });\n  });\n}\nclass MockValidator extends Validator {\n  constructor() {\n    super();\n  }\n  describe() {\n    return {'v': 11};\n  }\n}\nclass MockMetric extends Metric {\n  constructor() {\n    super();\n  }\n  describe() {\n    return {'m1': 'some metric'};\n  }\n}\nclass MockSampler extends Sampler {\n  constructor() {\n    super();\n  }\n  sample() {\n    return assert.returnType((PromiseWrapper.resolve(23)), Promise);\n  }\n}\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/benchpress/test/runner_spec.map\n\n//# sourceMappingURL=./runner_spec.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)"]}