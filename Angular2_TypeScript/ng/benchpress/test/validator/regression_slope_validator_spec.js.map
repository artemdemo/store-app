{"version":3,"sources":["@traceur/generated/TemplateParser/22","benchpress/test/validator/regression_slope_validator_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"benchpress/test/validator/regression_slope_validator_spec.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe,\n  ddescribe,\n  it,\n  iit,\n  xit,\n  expect,\n  beforeEach,\n  afterEach} from 'angular2/test_lib';\nimport {Date,\n  DateWrapper} from 'angular2/src/facade/lang';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {Validator,\n  RegressionSlopeValidator,\n  Injector,\n  bind,\n  MeasureValues} from 'benchpress/benchpress';\nexport function main() {\n  describe('regression slope validator', () => {\n    var validator;\n    function createValidator({size,\n      metric}) {\n      validator = new Injector([RegressionSlopeValidator.BINDINGS, bind(RegressionSlopeValidator.METRIC).toValue(metric), bind(RegressionSlopeValidator.SAMPLE_SIZE).toValue(size)]).get(Validator);\n    }\n    it('should return sampleSize and metric as description', () => {\n      createValidator({\n        size: 2,\n        metric: 'script'\n      });\n      expect(validator.describe()).toEqual({\n        'sampleSize': 2,\n        'regressionSlopeMetric': 'script'\n      });\n    });\n    it('should return null while the completeSample is smaller than the given size', () => {\n      createValidator({\n        size: 2,\n        metric: 'script'\n      });\n      expect(validator.validate([])).toBe(null);\n      expect(validator.validate([mv(0, 0, {})])).toBe(null);\n    });\n    it('should return null while the regression slope is < 0', () => {\n      createValidator({\n        size: 2,\n        metric: 'script'\n      });\n      expect(validator.validate([mv(0, 0, {'script': 2}), mv(1, 1, {'script': 1})])).toBe(null);\n    });\n    it('should return the last sampleSize runs when the regression slope is ==0', () => {\n      createValidator({\n        size: 2,\n        metric: 'script'\n      });\n      var sample = [mv(0, 0, {'script': 1}), mv(1, 1, {'script': 1}), mv(2, 2, {'script': 1})];\n      expect(validator.validate(ListWrapper.slice(sample, 0, 2))).toEqual(ListWrapper.slice(sample, 0, 2));\n      expect(validator.validate(sample)).toEqual(ListWrapper.slice(sample, 1, 3));\n    });\n    it('should return the last sampleSize runs when the regression slope is >0', () => {\n      createValidator({\n        size: 2,\n        metric: 'script'\n      });\n      var sample = [mv(0, 0, {'script': 1}), mv(1, 1, {'script': 2}), mv(2, 2, {'script': 3})];\n      expect(validator.validate(ListWrapper.slice(sample, 0, 2))).toEqual(ListWrapper.slice(sample, 0, 2));\n      expect(validator.validate(sample)).toEqual(ListWrapper.slice(sample, 1, 3));\n    });\n  });\n}\nfunction mv(runIndex, time, values) {\n  return new MeasureValues(runIndex, DateWrapper.fromMillis(time), values);\n}\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/benchpress/test/validator/regression_slope_validator_spec.map\n\n//# sourceMappingURL=./regression_slope_validator_spec.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}