{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/change_detection/coalesce.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,sHAAoB,UAAS,SAAQ;;;;;;;;;;ACQ7C,SAAS,SAAO,CAAE,OAAM,CAAG;AAChC,SAAK,cAAc,AAAC,CAAC,OAAM,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,YAAU,CAAC,CAAC,CAAC;AACpE,AAAI,MAAA,CAAA,GAAE,EAAI,CAAA,WAAU,OAAO,AAAC,EAAC,CAAC;AAC9B,AAAI,MAAA,CAAA,QAAO,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AAClC,QAAS,GAAA,CAAA,CAAA,EAAI,EAAA,CAAG,CAAA,CAAA,EAAI,CAAA,OAAM,OAAO,CAAG,GAAE,CAAA,CAAG;AACvC,AAAI,QAAA,CAAA,CAAA,EAAI,CAAA,OAAM,CAAE,CAAA,CAAC,CAAC;AAClB,AAAI,QAAA,CAAA,MAAK,EAAI,CAAA,eAAc,AAAC,CAAC,CAAA,CAAG,CAAA,GAAE,OAAO,EAAI,EAAA,CAAG,SAAO,CAAC,CAAC;AACzD,AAAI,QAAA,CAAA,cAAa,EAAI,CAAA,aAAY,AAAC,CAAC,MAAK,CAAG,IAAE,CAAC,CAAC;AAC/C,SAAI,SAAQ,AAAC,CAAC,cAAa,CAAC,CAAA,EAAK,CAAA,MAAK,cAAc,CAAG;AACrD,kBAAU,KAAK,AAAC,CAAC,GAAE,CAAG,CAAA,WAAU,AAAC,CAAC,MAAK,CAAG,CAAA,cAAa,UAAU,CAAG,CAAA,GAAE,OAAO,EAAI,EAAA,CAAC,CAAC,CAAC;AACpF,iBAAS,IAAI,AAAC,CAAC,QAAO,CAAG,CAAA,CAAA,UAAU,CAAG,CAAA,cAAa,UAAU,CAAC,CAAC;MACjE,KAAO,KAAI,SAAQ,AAAC,CAAC,cAAa,CAAC,CAAA,EAAK,EAAC,MAAK,cAAc,CAAG;AAC7D,iBAAS,IAAI,AAAC,CAAC,QAAO,CAAG,CAAA,CAAA,UAAU,CAAG,CAAA,cAAa,UAAU,CAAC,CAAC;MACjE,KAAO;AACL,kBAAU,KAAK,AAAC,CAAC,GAAE,CAAG,OAAK,CAAC,CAAC;AAC7B,iBAAS,IAAI,AAAC,CAAC,QAAO,CAAG,CAAA,CAAA,UAAU,CAAG,CAAA,MAAK,UAAU,CAAC,CAAC;MACzD;AAAA,IACF;AAAA,AACA,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,GAAE,CAAC,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,YAAU,CAAC,CAAC,CAAC;EACxE;AAAA,AAIA,SAAS,YAAU,CAAE,CAAA,CAAG,CAAA,YAAW,CAAG,CAAA,SAAQ,CAAG;AAC/C,SAAK,cAAc,AAAC,CAAC,CAAA,CAAG,YAAU,CAAG,aAAW,CAAG,CAAA,MAAK,KAAK,OAAO,CAAG,UAAQ,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AACrG,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,GAAI,YAAU,AAAC,CAAC,gBAAe,CAAG,OAAK,CAAG,KAAG,CAAG,GAAC,CAAG,CAAA,CAAA,UAAU,CAAG,aAAW,CAAG,UAAQ,CAAG,CAAA,CAAA,eAAe,CAAG,CAAA,CAAA,iBAAiB,CAAG,CAAA,CAAA,mBAAmB,CAAG,CAAA,CAAA,cAAc,CAAG,CAAA,CAAA,gBAAgB,CAAC,CAAC,CAAG,YAAU,CAAC,CAAC;EACpO;AAAA,AAIA,SAAS,cAAY,CAAE,CAAA,CAAG,CAAA,EAAC;AACzB,SAAO,CAAA,WAAU,KAAK,AAAC,CAAC,EAAC,GAAG,SAAC,EAAC;WAAM,CAAA,EAAC,KAAK,IAAM,CAAA,CAAA,KAAK,CAAA,EAAK,CAAA,EAAC,YAAY,IAAM,CAAA,CAAA,YAAY,CAAA,EAAK,CAAA,EAAC,aAAa,IAAM,CAAA,CAAA,aAAa,CAAA,EAAK,CAAA,WAAU,OAAO,AAAC,CAAC,EAAC,KAAK,CAAG,CAAA,CAAA,KAAK,CAAC;IAAA,EAAC,CAAC;EAC1K;AAIA,SAAS,gBAAc,CAAE,CAAA,CAAG,CAAA,SAAQ,CAAG,CAAA,QAAO;AAC5C,AAAI,MAAA,CAAA,IAAG,EAAI,CAAA,WAAU,IAAI,AAAC,CAAC,CAAA,KAAK,GAAG,SAAC,CAAA;WAAM,CAAA,IAAG,AAAC,CAAC,QAAO,CAAG,EAAA,CAAC;IAAA,EAAC,CAAC;AAC5D,AAAI,MAAA,CAAA,YAAW,EAAI,CAAA,IAAG,AAAC,CAAC,QAAO,CAAG,CAAA,CAAA,aAAa,CAAC,CAAC;AACjD,SAAO,IAAI,YAAU,AAAC,CAAC,CAAA,KAAK,CAAG,CAAA,CAAA,KAAK,CAAG,CAAA,CAAA,YAAY,CAAG,KAAG,CAAG,CAAA,CAAA,UAAU,CAAG,aAAW,CAAG,UAAQ,CAAG,CAAA,CAAA,eAAe,CAAG,CAAA,CAAA,iBAAiB,CAAG,CAAA,CAAA,mBAAmB,CAAG,CAAA,CAAA,cAAc,CAAG,CAAA,CAAA,gBAAgB,CAAC,CAAC;EACnM;AAIA,SAAS,KAAG,CAAE,QAAO,CAAG,CAAA,KAAI,CAAG;AAC7B,SAAK,cAAc,AAAC,CAAC,QAAO,CAAG,IAAE,CAAG,MAAI,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AAC9D,AAAI,MAAA,CAAA,CAAA,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,QAAO,CAAG,MAAI,CAAC,CAAC;AACvC,SAAO,CAAA,SAAQ,AAAC,CAAC,CAAA,CAAC,CAAA,CAAI,EAAA,EAAI,MAAI,CAAC;EACjC;ACvDQ,ADuDR,UCvDgB,AAAC,sBAAqC,CAAA;ACDtD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG,CAAG;ACAf,aAAoB,KAAG,OAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,gBAAoB,KAAG,UAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,uBAAoB,KAAG,iBAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;AF0BZ,WAAK,eAAe,AAAC,CAAC,QAAO,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC3D,eAAO,EAAC,CAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,YAAU,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;AAKL,WAAK,eAAe,AAAC,CAAC,WAAU,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC9D,eAAO,EAAC,CAAC,WAAU,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;AAIL,WAAK,eAAe,AAAC,CAAC,aAAY,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAChE,eAAO,EAAC,CAAC,WAAU,CAAC,CAAG,EAAC,MAAK,YAAY,AAAC,CAAC,IAAG,CAAG,YAAU,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;AAML,WAAK,eAAe,AAAC,CAAC,eAAc,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAClE,eAAO,EAAC,CAAC,WAAU,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAG,EAAC,GAAE,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;AAML,WAAK,eAAe,AAAC,CAAC,IAAG,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACvD,eAAO,EAAC,CAAC,GAAE,CAAC,CAAG,EAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IEzD0B;EAC3B,CAAA;AHDI,CAAC,CAAC;AC6DwB","file":"angular2/src/change_detection/coalesce.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {assert} from \"rtts_assert/rtts_assert\";\nimport {isPresent} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  Map,\n  MapWrapper} from 'angular2/src/facade/collection';\nimport {RECORD_TYPE_SELF,\n  ProtoRecord} from './proto_change_detector';\nexport function coalesce(records) {\n  assert.argumentTypes(records, assert.genericType(List, ProtoRecord));\n  var res = ListWrapper.create();\n  var indexMap = MapWrapper.create();\n  for (var i = 0; i < records.length; ++i) {\n    var r = records[i];\n    var record = _replaceIndices(r, res.length + 1, indexMap);\n    var matchingRecord = _findMatching(record, res);\n    if (isPresent(matchingRecord) && record.lastInBinding) {\n      ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));\n      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\n    } else if (isPresent(matchingRecord) && !record.lastInBinding) {\n      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\n    } else {\n      ListWrapper.push(res, record);\n      MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);\n    }\n  }\n  return assert.returnType((res), assert.genericType(List, ProtoRecord));\n}\nObject.defineProperty(coalesce, \"parameters\", {get: function() {\n    return [[assert.genericType(List, ProtoRecord)]];\n  }});\nfunction _selfRecord(r, contextIndex, selfIndex) {\n  assert.argumentTypes(r, ProtoRecord, contextIndex, assert.type.number, selfIndex, assert.type.number);\n  return assert.returnType((new ProtoRecord(RECORD_TYPE_SELF, \"self\", null, [], r.fixedArgs, contextIndex, selfIndex, r.bindingMemento, r.directiveMemento, r.expressionAsString, r.lastInBinding, r.lastInDirective)), ProtoRecord);\n}\nObject.defineProperty(_selfRecord, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.number], [assert.type.number]];\n  }});\nfunction _findMatching(r, rs) {\n  return ListWrapper.find(rs, (rr) => rr.mode === r.mode && rr.funcOrValue === r.funcOrValue && rr.contextIndex === r.contextIndex && ListWrapper.equals(rr.args, r.args));\n}\nObject.defineProperty(_findMatching, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.genericType(List, ProtoRecord)]];\n  }});\nfunction _replaceIndices(r, selfIndex, indexMap) {\n  var args = ListWrapper.map(r.args, (a) => _map(indexMap, a));\n  var contextIndex = _map(indexMap, r.contextIndex);\n  return new ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, selfIndex, r.bindingMemento, r.directiveMemento, r.expressionAsString, r.lastInBinding, r.lastInDirective);\n}\nObject.defineProperty(_replaceIndices, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.number], [Map]];\n  }});\nfunction _map(indexMap, value) {\n  assert.argumentTypes(indexMap, Map, value, assert.type.number);\n  var r = MapWrapper.get(indexMap, value);\n  return isPresent(r) ? r : value;\n}\nObject.defineProperty(_map, \"parameters\", {get: function() {\n    return [[Map], [assert.type.number]];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/src/change_detection/coalesce.map\n\n//# sourceMappingURL=./coalesce.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}