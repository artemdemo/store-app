{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/change_detection/interfaces.js","@traceur/generated/TemplateParser/24"],"names":[],"mappings":"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","file":"angular2/src/change_detection/interfaces.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {assert} from \"rtts_assert/rtts_assert\";\nimport {List} from 'angular2/src/facade/collection';\nexport class ChangeRecord {\n  constructor(bindingMemento, change) {\n    this.bindingMemento = bindingMemento;\n    this.change = change;\n  }\n  get currentValue() {\n    return this.change.currentValue;\n  }\n  get previousValue() {\n    return this.change.previousValue;\n  }\n}\nexport const CHECK_ONCE = \"CHECK_ONCE\";\nexport const CHECKED = \"CHECKED\";\nexport const CHECK_ALWAYS = \"ALWAYS_CHECK\";\nexport const DETACHED = \"DETACHED\";\nexport class ChangeDispatcher {\n  onRecordChange(directiveMemento, records) {\n    assert.argumentTypes(directiveMemento, assert.type.any, records, assert.genericType(List, ChangeRecord));\n  }\n}\nObject.defineProperty(ChangeDispatcher.prototype.onRecordChange, \"parameters\", {get: function() {\n    return [[], [assert.genericType(List, ChangeRecord)]];\n  }});\nexport class ChangeDetector {\n  addChild(cd) {\n    assert.argumentTypes(cd, ChangeDetector);\n  }\n  removeChild(cd) {\n    assert.argumentTypes(cd, ChangeDetector);\n  }\n  remove() {}\n  setContext(context) {\n    assert.argumentTypes(context, assert.type.any);\n  }\n  markPathToRootAsCheckOnce() {}\n  detectChanges() {}\n  checkNoChanges() {}\n}\nObject.defineProperty(ChangeDetector.prototype.addChild, \"parameters\", {get: function() {\n    return [[ChangeDetector]];\n  }});\nObject.defineProperty(ChangeDetector.prototype.removeChild, \"parameters\", {get: function() {\n    return [[ChangeDetector]];\n  }});\nObject.defineProperty(ChangeDetector.prototype.setContext, \"parameters\", {get: function() {\n    return [[assert.type.any]];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/src/change_detection/interfaces.map\n\n//# sourceMappingURL=./interfaces.map","$__export($__placeholder__0, $__placeholder__1)"]}