{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","angular2/src/core/compiler/xhr/xhr_impl.js","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,mEAAoB,UAAS,SAAQ;;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG,CAAG;ACAf,aAAoB,KAAG,OAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,cAAoB,KAAG,QAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,UAAoB,KAAG,IAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;cGFY,CAAA,SAAQ,AAAC,aCAjC,SAAS,QAAO;AACN,AAAI,UAAA,UCGP,SAAM,QAAM;ACJnB,wBAAc,iBAAiB,AAAC,SACL,MAAM,AAAC,CAAC,IAAG,CAAG,UAAQ,CAAC,CAAA;QFAA,ACwBlD,CDxBmD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,WCG5C,GAAE,CAAF,UAAI,GAAE,CAAG;AACP,iBAAK,cAAc,AAAC,CAAC,GAAE,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC;AAC7C,AAAI,cAAA,CAAA,SAAQ,EAAI,CAAA,cAAa,UAAU,AAAC,EAAC,CAAC;AAC1C,AAAI,cAAA,CAAA,GAAE,EAAI,IAAI,eAAa,AAAC,EAAC,CAAC;AAC9B,cAAE,KAAK,AAAC,CAAC,KAAI,CAAG,IAAE,CAAG,KAAG,CAAC,CAAC;AAC1B,cAAE,aAAa,EAAI,OAAK,CAAC;AACzB,cAAE,OAAO,EAAI,UAAQ,AAAC,CAAE;AACtB,AAAI,gBAAA,CAAA,MAAK,EAAI,CAAA,GAAE,OAAO,CAAC;AACvB,iBAAI,GAAE,GAAK,OAAK,CAAA,EAAK,CAAA,MAAK,GAAK,IAAE,CAAG;AAClC,wBAAQ,SAAS,AAAC,CAAC,GAAE,aAAa,CAAC,CAAC;cACtC,KAAO;AACL,wBAAQ,OAAO,AAAC,EAAC,iBAAiB,EAAC,IAAE,EAAG,CAAC;cAC3C;AAAA,YACF,CAAC;AACD,cAAE,QAAQ,EAAI,UAAQ,AAAC,CAAE;AACvB,sBAAQ,OAAO,AAAC,EAAC,iBAAiB,EAAC,IAAE,EAAG,CAAC;YAC3C,CAAC;AACD,cAAE,KAAK,AAAC,EAAC,CAAC;AACV,iBAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAC,SAAQ,QAAQ,CAAC,CAAG,CAAA,MAAK,YAAY,AAAC,CAAC,OAAM,CAAG,CAAA,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;UAChG,MDrBgE,SAAO,CAAC,CAAC;MACnE,AAAC,CCAoB,GAAE,CDAJ,EDJ2C;AE0BtE,WAAK,eAAe,AAAC,CAAC,OAAM,UAAU,IAAI,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AACxE,eAAO,EAAC,CAAC,MAAK,KAAK,OAAO,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IL1B0B;EAC3B,CAAA;ADDI,CAAC,CAAC;AM8BwB","file":"angular2/src/core/compiler/xhr/xhr_impl.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {assert} from \"rtts_assert/rtts_assert\";\nimport {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nimport {XHR} from './xhr';\nexport class XHRImpl extends XHR {\n  get(url) {\n    assert.argumentTypes(url, assert.type.string);\n    var completer = PromiseWrapper.completer();\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function() {\n      var status = xhr.status;\n      if (200 <= status && status <= 300) {\n        completer.complete(xhr.responseText);\n      } else {\n        completer.reject(`Failed to load ${url}`);\n      }\n    };\n    xhr.onerror = function() {\n      completer.reject(`Failed to load ${url}`);\n    };\n    xhr.send();\n    return assert.returnType((completer.promise), assert.genericType(Promise, assert.type.string));\n  }\n}\nObject.defineProperty(XHRImpl.prototype.get, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/src/core/compiler/xhr/xhr_impl.map\n\n//# sourceMappingURL=./xhr_impl.map","$traceurRuntime.superConstructor(\n          $__placeholder__0).apply(this, arguments)"]}