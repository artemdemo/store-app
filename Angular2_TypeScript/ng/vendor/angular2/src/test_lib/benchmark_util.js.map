{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/test_lib/benchmark_util.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"angular2/src/test_lib/benchmark_util.js","sourceRoot":"C:/Sources/git/angular20/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {assert} from \"rtts_assert/rtts_assert\";\nimport {DOM,\n  document,\n  location} from 'angular2/src/facade/dom';\nimport {NumberWrapper,\n  BaseException,\n  isBlank} from 'angular2/src/facade/lang';\nexport function getIntParameter(name) {\n  assert.argumentTypes(name, assert.type.string);\n  return NumberWrapper.parseInt(getStringParameter(name), 10);\n}\nObject.defineProperty(getIntParameter, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport function getStringParameter(name) {\n  assert.argumentTypes(name, assert.type.string);\n  var els = DOM.querySelectorAll(document, `input[name=\"${name}\"]`);\n  var value;\n  var el;\n  for (var i = 0; i < els.length; i++) {\n    el = els[i];\n    if ((el.type !== 'radio' && el.type !== 'checkbox') || el.checked) {\n      value = el.value;\n      break;\n    }\n  }\n  if (isBlank(value)) {\n    throw new BaseException(`Could not find and input field with name ${name}`);\n  }\n  return value;\n}\nObject.defineProperty(getStringParameter, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport function bindAction(selector, callback) {\n  assert.argumentTypes(selector, assert.type.string, callback, Function);\n  var el = DOM.querySelector(document, selector);\n  DOM.on(el, 'click', function(_) {\n    callback();\n  });\n}\nObject.defineProperty(bindAction, \"parameters\", {get: function() {\n    return [[assert.type.string], [Function]];\n  }});\n\n//# sourceMappingURL=C:/Sources/git/angular20/modules/angular2/src/test_lib/benchmark_util.map\n\n//# sourceMappingURL=./benchmark_util.map","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}