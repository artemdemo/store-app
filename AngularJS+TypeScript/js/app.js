var storeApp;
(function (storeApp) {
    var AppConfiguration = (function () {
        function AppConfiguration($stateProvider, $urlRouterProvider) {
            this.$stateProvider = $stateProvider;
            this.$urlRouterProvider = $urlRouterProvider;
            $urlRouterProvider.otherwise("/");
            $stateProvider
                .state('home', {
                url: "/",
                templateUrl: "pages/home.html"
            })
                .state('store', {
                url: "/store",
                templateUrl: "pages/store.html"
            });
        }
        AppConfiguration.$inject = [
            '$stateProvider',
            '$urlRouterProvider'
        ];
        return AppConfiguration;
    })();
    angular.module("storeApp", ["ui.router"])
        .config(AppConfiguration);
})(storeApp || (storeApp = {}));

var storeApp;
(function (storeApp) {
    angular.module('storeApp')
        .constant("menuUrl", "../menu.json");
})(storeApp || (storeApp = {}));



var storeApp;
(function (storeApp) {
    var MenuService = (function () {
        function MenuService($http, menuUrl) {
            this.$http = $http;
            this.menuUrl = menuUrl;
            this.menu = null;
        }
        MenuService.prototype.loadMenu = function () {
            this.$http.get(this.menuUrl)
                .then(function (menu) {
                this.setMenu(menu.data);
            }.bind(this));
        };
        MenuService.prototype.setMenu = function (newMenu) {
            this.menu = newMenu;
        };
        MenuService.prototype.getMenu = function () {
            return this.menu;
        };
        MenuService.$inject = [
            '$http',
            'menuUrl'
        ];
        return MenuService;
    })();
    angular.module('storeApp')
        .service('menuService', MenuService);
})(storeApp || (storeApp = {}));

var storeApp;
(function (storeApp) {
    var CartService = (function () {
        function CartService() {
            this.Cart = {
                items: []
            };
        }
        CartService.prototype.insertItem = function (newItem) {
            var item = angular.copy(newItem);
            item._uniqueID = (new Date()).getTime();
            this.Cart.items.push(item);
        };
        CartService.prototype.removeItem = function (item) {
            for (var i = 0; i < this.Cart.items.length; i++) {
                if (item._uniqueID == this.Cart.items[i]._uniqueID) {
                    this.Cart.items.splice(i, 1);
                    return true;
                }
            }
            return false;
        };
        CartService.prototype.getSubTotal = function () {
            var subtotal = 0;
            for (var i = 0; i < this.Cart.items.length; i++) {
                subtotal += this.Cart.items[i].price;
            }
            return subtotal;
        };
        CartService.prototype.getTax = function () {
            var tax = 0;
            for (var i = 0; i < this.Cart.items.length; i++) {
                tax += this.Cart.items[i].tax;
            }
            return tax;
        };
        CartService.prototype.getTotal = function () {
            var tax = this.getTax();
            var subtotal = this.getSubTotal();
            return tax + subtotal;
        };
        CartService.prototype.getCart = function () {
            return this.Cart;
        };
        CartService.prototype.getItemsCount = function () {
            return this.Cart.items.length;
        };
        return CartService;
    })();
    angular.module('storeApp')
        .service('cartService', CartService);
})(storeApp || (storeApp = {}));

var storeApp;
(function (storeApp) {
    var MainCtrl = (function () {
        function MainCtrl(menuService) {
            menuService.loadMenu();
        }
        MainCtrl.$inject = [
            'menuService'
        ];
        return MainCtrl;
    })();
    angular.module('storeApp')
        .controller('mainCtrl', MainCtrl);
})(storeApp || (storeApp = {}));

var storeApp;
(function (storeApp) {
    var HomeCtrl = (function () {
        function HomeCtrl($state) {
            this.$state = $state;
        }
        HomeCtrl.prototype.enterStore = function () {
            this.$state.go('store');
        };
        HomeCtrl.$inject = [
            '$state'
        ];
        return HomeCtrl;
    })();
    angular.module('storeApp')
        .controller('homeCtrl', HomeCtrl);
})(storeApp || (storeApp = {}));

var storeApp;
(function (storeApp) {
    var StoreCtrl = (function () {
        function StoreCtrl($scope, $state, menuService, cartService) {
            this.$scope = $scope;
            this.$state = $state;
            this.menuService = menuService;
            this.cartService = cartService;
            this.menu = menuService.getMenu();
            this.currentCategory = this.menu[0];
        }
        StoreCtrl.prototype.selectCategory = function (cat) {
            this.currentCategory = cat;
        };
        StoreCtrl.prototype.checkActiveCategory = function (cat) {
            return cat.id == this.currentCategory.id;
        };
        StoreCtrl.prototype.addItem = function (item) {
            this.cartService.insertItem(item);
            this.$scope.$broadcast('update-cart');
        };
        StoreCtrl.$inject = [
            '$scope',
            '$state',
            'menuService',
            'cartService'
        ];
        return StoreCtrl;
    })();
    angular.module('storeApp')
        .controller('storeCtrl', StoreCtrl);
})(storeApp || (storeApp = {}));

var storeApp;
(function (storeApp) {
    var CartCtrl = (function () {
        function CartCtrl($scope, cartService) {
            var _this = this;
            this.$scope = $scope;
            this.cartService = cartService;
            this.updateCart();
            $scope.$on('update-cart', function () {
                _this.updateCart();
            });
        }
        CartCtrl.prototype.removeItem = function (item) {
            this.cartService.removeItem(item);
            this.updateCart();
        };
        CartCtrl.prototype.updateCart = function () {
            this.cart = this.cartService.getCart();
            this.itemsCount = this.cartService.getItemsCount();
            this.subtotal = this.cartService.getSubTotal();
            this.tax = this.cartService.getTax();
            this.total = this.cartService.getTotal();
        };
        CartCtrl.$inject = [
            '$scope',
            'cartService'
        ];
        return CartCtrl;
    })();
    angular.module('storeApp')
        .controller('cartCtrl', CartCtrl);
})(storeApp || (storeApp = {}));

/// <reference path="./d.ts/angular.d.ts" />
/// <reference path="./d.ts/angular-ui-router.d.ts" />
/// <reference path="./app.ts" />
/// <reference path="./interfaces.ts" />
/// <reference path="./constants.ts" />
/// <reference path="./services/menuService.ts" />
/// <reference path="./services/cartService.ts" />
/// <reference path="./controllers/mainCtrl.ts" />
/// <reference path="./controllers/homeCtrl.ts" />
/// <reference path="./controllers/storeCtrl.ts" />
/// <reference path="./controllers/cartCtrl.ts" />

//# sourceMappingURL=data:application/json;base64,